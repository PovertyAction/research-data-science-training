---
title: "Version Control with Git in VS Code"
abstract: |
  Master Git integration in VS Code including staging changes, making commits, managing branches, handling merge conflicts, and collaborating with remote repositories. Learn both GUI and command-line workflows.
date: last-modified

format:
  html: default

# # Authors
# authors-ipa:
#   - "[Author Name](https://poverty-action.org/people/author_name)"

# # Contributors
# contributors:
#   - "[Contributor Name](https://poverty-action.org/people/contributor_name)"

keywords: ["VS Code", "Git", "Version Control", "Source Control", "Branches", "Merge Conflicts", "Remote Repository", "Collaboration"]
license: "CC BY 4.0"
---

::: {.callout-note}

## Learning Objectives

- Initialize and manage Git repositories in VS Code
- Stage, commit, and push changes using the Source Control view
- Create and switch between Git branches
- Resolve merge conflicts with VS Code's merge editor
- Work with remote repositories and collaborate with others
- Use GitLens extension for enhanced Git capabilities
:::

::: {.callout-tip}

## Key Questions

- How do I set up a Git repository in my VS Code workspace?
- What's the difference between staged and unstaged changes?
- How do I create and manage branches for different features?
- How can I resolve merge conflicts effectively?
- How do I collaborate with others using remote repositories?
:::

::: {.callout-note}

## Attribution

This content is adapted from the official [Visual Studio Code Version Control Documentation](https://code.visualstudio.com/docs/sourcecontrol/overview) and [Git integration guide](https://code.visualstudio.com/docs/sourcecontrol/intro-to-git), which are licensed under [Creative Commons Attribution 3.0](https://creativecommons.org/licenses/by/3.0/us/). © Microsoft Corporation.
:::

## Video Overview: Git Integration in VS Code

Watch this overview of VS Code's Git integration:

{{< video <https://youtu.be/i_23KUAEtUM> title="Git Integration in Visual Studio Code" >}}

This 5-minute video covers:

- Source Control view basics
- Staging and committing changes
- Working with branches
- Remote repository integration

## Understanding Git in VS Code

VS Code has built-in Git support that provides a visual interface for most Git operations while maintaining access to command-line functionality.

### Prerequisites

**Git installation**: VS Code requires Git to be installed on your system:

- **Windows**: Download from [git-scm.com](https://git-scm.com)
- **macOS**: Install via Xcode Command Line Tools or Homebrew
- **Linux**: Install via package manager (`apt install git`)

**Verify installation**:

```bash
git --version
```

### Source Control View

Access Git features through the Source Control view (Ctrl+Shift+G):

**Main sections**:

- **Changes**: Modified files not yet staged
- **Staged Changes**: Files ready to be committed
- **Merge Changes**: Files with conflicts (when applicable)
- **Repository actions**: Branch, sync, and remote operations

## Setting Up Git Repository

### Initialize New Repository

**Method 1: VS Code Interface**

1. Open folder in VS Code
2. Source Control view → "Initialize Repository" button
3. VS Code creates `.git` folder and initial setup

**Method 2: Command Line**

```bash
git init
git add .
git commit -m "Initial commit"
```

### Clone Existing Repository

**Method 1: Command Palette**

1. Ctrl+Shift+P → "Git: Clone"
2. Enter repository URL
3. Choose local folder location

**Method 2: Welcome Screen**

1. VS Code Welcome → "Clone Git Repository"
2. Enter repository URL
3. Select destination folder

::: {.callout-note}

## Try This: Repository Setup

Practice both methods:

1. Create new folder and initialize Git repository
2. Clone a public repository (e.g., from GitHub)
3. Compare the Source Control view in both cases
:::

## Basic Git Operations

### Making Changes and Staging

**File change indicators** (in Explorer):

- **M**: Modified file
- **U**: Untracked (new) file
- **D**: Deleted file

**Staging changes**:

- **Stage single file**: Click + next to file in Changes
- **Stage all changes**: Click + next to "Changes" header
- **Stage specific lines**: Select text → right-click → "Stage Selected Ranges"

**Unstaging changes**:

- Click - next to file in Staged Changes
- Right-click file → "Unstage Changes"

### Committing Changes

**Create commit**:

1. Stage desired changes
2. Enter commit message in text box
3. Press Ctrl+Enter or click ✓ (commit button)

**Commit message best practices**:

```
Short summary (50 characters max)

Longer description if needed. Explain why the change
was made, not just what was changed.

- Use bullet points for multiple changes
- Reference issue numbers: Fixes #123
```

**Amend last commit**:

- Command Palette → "Git: Commit Staged (Amend)"
- Modifies the previous commit instead of creating new one

::: {.callout-note}

## Try This: First Commit Workflow

Practice the complete workflow:

1. Create or modify a file
2. See the change in Source Control view
3. Stage the change
4. Write a descriptive commit message
5. Commit the change
6. Check git history (Command Palette → "Git: View History")
:::

## Working with Branches

Branches allow you to work on different features or experiments without affecting the main codebase.

### Branch Management in VS Code

**Current branch**: Displayed in status bar (bottom-left)

**Create new branch**:

1. Click branch name in status bar
2. Select "Create new branch"
3. Enter branch name

**Switch branches**:

1. Click branch name in status bar
2. Select branch from list

**Branch operations**:

- **Merge branch**: Command Palette → "Git: Merge Branch"
- **Delete branch**: Command Palette → "Git: Delete Branch"
- **Rename branch**: Command Palette → "Git: Rename Branch"

### Branch Workflows

#### **Feature Branch Workflow**

```bash
# Create feature branch
git checkout -b feature/user-authentication

# Make changes and commits
git add .
git commit -m "Add user login functionality"

# Switch back to main
git checkout main

# Merge feature branch
git merge feature/user-authentication
```

#### **Gitflow Workflow**

- **main**: Production-ready code
- **develop**: Integration branch
- **feature/**: New features
- **hotfix/**: Critical fixes
- **release/**: Release preparation

::: {.callout-note}

## Try This: Branch Practice

Complete branch workflow:

1. Create new branch called "feature/new-function"
2. Switch to the new branch
3. Make changes and commit them
4. Switch back to main branch
5. Merge your feature branch
6. Delete the feature branch
:::

## Merge Conflicts and Resolution

Merge conflicts occur when Git cannot automatically combine changes from different branches.

### Understanding Merge Conflicts

**Conflict indicators in files**:

```python
def calculate_total(items):
<<<<<<< HEAD
    # Current branch version
    total = sum(item.price for item in items)
    return total * 1.1  # Add 10% tax
=======
    # Incoming branch version
    total = 0
    for item in items:
        total += item.price
    return total
>>>>>>> feature-branch
```

### VS Code Merge Editor

VS Code provides a three-way merge editor for resolving conflicts:

**Merge editor sections**:

- **Incoming**: Changes from the branch being merged
- **Current**: Changes in the current branch
- **Result**: Your resolved version

**Resolution options**:

- **Accept Current**: Keep current branch version
- **Accept Incoming**: Use incoming branch version
- **Accept Both**: Include both changes
- **Manual Edit**: Create custom resolution

### Resolving Conflicts Step-by-Step

1. **Identify conflicts**: VS Code highlights conflicted files
2. **Open merge editor**: Click on conflicted file
3. **Review changes**: Compare current vs incoming
4. **Choose resolution**: Use buttons or edit manually
5. **Save resolved file**: Conflicts are automatically marked as resolved
6. **Complete merge**: Stage resolved files and commit

::: {.callout-note}

## Try This: Practice Merge Conflicts

Create an intentional conflict to practice resolution:

1. Create two branches from main
2. Modify the same line in both branches differently
3. Commit changes in both branches
4. Merge one branch into the other
5. Resolve the conflict using VS Code's merge editor
:::

## Working with Remote Repositories

Remote repositories enable collaboration and code sharing.

### Remote Repository Operations

**Add remote**:

```bash
git remote add origin https://github.com/username/repository.git
```

**Push changes**:

- Click sync button in status bar
- Command Palette → "Git: Push"
- Or use Ctrl+Shift+P → "Git: Sync"

**Pull changes**:

- Click sync button (pull icon)
- Command Palette → "Git: Pull"

**Fetch updates**:

- Command Palette → "Git: Fetch"
- Downloads remote changes without merging

### Collaboration Workflows

#### **Centralized Workflow**

1. Clone shared repository
2. Make changes locally
3. Pull latest changes before pushing
4. Resolve conflicts if necessary
5. Push changes to remote

#### **Fork and Pull Request Workflow**

1. Fork repository on GitHub/GitLab
2. Clone your fork locally
3. Create feature branch
4. Make changes and push to fork
5. Create pull request to original repository

### Sync Operations

**Status bar sync button**:

- **Up arrow with number**: Commits to push
- **Down arrow with number**: Commits to pull
- **Circular arrow**: Sync (pull then push)

**Automatic sync**:
Configure auto-sync in settings:

```json
{
    "git.autofetch": true,
    "git.autofetchPeriod": 180
}
```

## GitLens Extension

GitLens supercharges VS Code's Git capabilities with advanced features.

### Installing GitLens

1. Extensions view (Ctrl+Shift+X)
2. Search for "GitLens — Git supercharged"
3. Install and reload VS Code

### Key GitLens Features

#### **Blame Annotations**

See who changed each line and when:

- **Inline blame**: Author and date next to each line
- **Toggle**: Command Palette → "GitLens: Toggle Line Blame"

#### **File History**

Explore complete file history:

- Right-click file → "Open File History"
- See all commits that modified the file
- Compare different versions

#### **Repository Insights**

- **Contributors view**: See team member contributions
- **File heat map**: Visualize code change frequency
- **Commit search**: Find commits by message, author, or changes

#### **Advanced Diff Views**

- **Side-by-side comparison**: Better change visualization
- **Word-level highlighting**: Precise change detection
- **Multiple commit comparison**: Compare across commits

::: {.callout-note}

## Try This: GitLens Exploration

Explore GitLens features:

1. Install GitLens extension
2. Open a file with commit history
3. Enable line blame annotations
4. Use file history to see evolution
5. Explore repository insights
:::

## Git Configuration and Settings

### User Configuration

Set up Git identity:

```bash
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
```

### VS Code Git Settings

Important Git settings in VS Code:

```json
{
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "git.autofetch": true,
    "git.showPushSuccessNotification": true,
    "scm.diffDecorations": "gutter",
    "scm.alwaysShowProviders": true
}
```

### Ignore Files (.gitignore)

Create `.gitignore` to exclude files from version control:

```bash
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
.venv/

# IDE
.vscode/settings.json
.idea/

# OS
.DS_Store
Thumbs.db

# Dependencies
node_modules/
```

## Advanced Git Features

### Stashing Changes

Temporarily save changes without committing:

**Create stash**:

- Command Palette → "Git: Stash"
- Saves current changes and resets working directory

**Apply stash**:

- Command Palette → "Git: Stash Pop"
- Restores stashed changes

### Rebase Operations

Rewrite commit history for cleaner project history:

**Interactive rebase**:

- Command Palette → "Git: Rebase"
- Reorder, squash, or edit commits

**Rebase vs Merge**:

- **Merge**: Preserves branch history
- **Rebase**: Creates linear history

### Cherry-picking

Apply specific commits from other branches:

- Command Palette → "Git: Cherry Pick"
- Select commit to apply to current branch

::: {.callout-note}

## Exercise: Complete Git Workflow

Practice end-to-end Git workflow:

1. **Setup**: Initialize repository and set remote
2. **Feature development**: Create branch, make changes, commit
3. **Collaboration**: Push branch, create pull request
4. **Conflict resolution**: Handle merge conflicts
5. **Maintenance**: Use stash for temporary changes
6. **History management**: Use GitLens to explore project history
:::

## Troubleshooting Common Git Issues

### Authentication Problems

**HTTPS authentication**:

- Use personal access tokens instead of passwords
- Configure credential manager

**SSH authentication**:

```bash
ssh-keygen -t rsa -b 4096 -C "your.email@example.com"
# Add public key to GitHub/GitLab
```

### Repository Issues

**Detached HEAD state**:

- Create branch from current commit
- Command Palette → "Git: Create Branch"

**Large file issues**:

- Use Git LFS for large files
- Configure in `.gitattributes`

**Performance issues**:

- Configure file exclusions in settings
- Use sparse-checkout for large repositories

### Merge and Sync Issues

**Failed push (non-fast-forward)**:

1. Pull latest changes first
2. Resolve any conflicts
3. Push again

**Accidentally committed secrets**:

1. Remove from history with filter-branch or BFG
2. Rotate compromised credentials
3. Force push cleaned history

::: {.callout-important}

## Key Points

- VS Code provides comprehensive Git integration through the Source Control view
- Use staging to prepare specific changes for commits
- Branches enable parallel development and experimentation
- VS Code's merge editor simplifies conflict resolution
- Remote repositories enable collaboration and backup
- GitLens extension adds powerful Git visualization and history features
- Proper .gitignore configuration prevents unwanted files in version control
- Authentication setup is crucial for remote repository access
- Regular commits with descriptive messages improve project maintainability
:::

[← Previous: Debugging](06-debugging.qmd) | [Back to Index](index.qmd)
